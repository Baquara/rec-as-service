% Encoding: UTF-8

@InProceedings{Nesrine2018,
  author = {Nesrine, Sbai and Ben Sassi, Sihem and Ben Ghezala, Henda},
  title  = {Towards A Benchmark for OSS Recommender Systems},
  year   = {2018},
  month  = {07},
}

@InProceedings{Thung2016,
  author    = {F. {Thung}},
  booktitle = {2016 31st IEEE/ACM International Conference on Automated Software Engineering (ASE)},
  title     = {API recommendation system for software development},
  year      = {2016},
  month     = {Sep.},
  pages     = {896-899},
  abstract  = {Nowadays, software developers often utilize existing third party libraries and make use of Application Programming Interface (API) to develop a software. However, it is not always obvious which library to use or whether the chosen library will play well with other libraries in the system. Furthermore, developers need to spend some time to understand the API to the point that they can freely use the API methods and putting the right parameters inside them. In this work, I plan to automatically recommend relevant APIs to developers. This API recommendation can be divided into multiple stages. First, we can recommend relevant libraries provided a given task to complete. Second, we can recommend relevant API methods that developer can use to program the required task. Third, we can recommend correct parameters for a given method according to its context. Last but not least, we can recommend how different API methods can be combined to achieve a given task. In effort to realize this API recommendation system, I have published two related papers. The first one deals with recommending additional relevant API libraries given known useful API libraries for the target program. This system can achieve recall rate@5 of 0.852 and recall rate@10 of 0.894 in recommending additional relevant libraries. The second one deals with recommending relevant API methods a given target API and a textual description of the task. This system can achieve recall-rate@5 of 0.690 and recall-rate@10 of 0.779. The results for both system indicate that the systems are useful and capable in recommending the right API/library reasonably well. Currently, I am working on another system which can recommend web APIs (i.e., libraries) given a description of the task. I am also working on a system that recommends correct parameters given an API method. In the future, I also plan to realize API composition recommendation for the given task.},
  keywords  = {application program interfaces;recommender systems;software libraries;API recommendation system;software development;application programming interface;API libraries;textual description;recall-rate;Libraries;Feature extraction;Training;Software;Databases;History;Context;API;Library;Recommendation System},
}

@InProceedings{Beyer2015,
  author    = {S. {Beyer}},
  booktitle = {2015 IEEE/ACM 37th IEEE International Conference on Software Engineering},
  title     = {DIETs: Recommender Systems for Mobile API Developers},
  year      = {2015},
  month     = {May},
  pages     = {859-862},
  volume    = {2},
  abstract  = {The increasing number of posts related to mobile app development indicates unaddressed problems in the usage of mobile APIs. Arguing that these problems result from in- adequate documentation and shortcomings in the design and implementation of the APIs, the goal of this research is to develop and evaluate two developers' issues elimination tools (DIETs) for mobile API developers to diminish the problems of mobile applications (apps) development.After categorizing the problems, we investigate their causes, by exploring the relationships between the topics and trends of posts on Stack Overflow, the app developers' experience, the API and test code, and its changes. The results of these studies will be used to develop two DIETs that support API developers to improve the documentation, design, and implementation of their APIs.},
  doi       = {10.1109/ICSE.2015.278},
  issn      = {1558-1225},
  keywords  = {application program interfaces;mobile computing;recommender systems;system documentation;DIET;recommender systems;mobile API developers;mobile app development;developer issues elimination tool;mobile application development;Stack Overflow;app developer experience;test code;system documentation;Mobile communication;Documentation;Smart phones;Androids;Humanoid robots;Software engineering;Data mining;recommender systems;api;mobile api developers},
}

@InProceedings{Teruya2020,
  author    = {H. S. {Teruya} and I. {Mar√ßal} and R. C. M. {Correia} and R. E. {Garcia} and D. M. {Eler} and J. O. R. {Nunes}},
  booktitle = {2020 15th Iberian Conference on Information Systems and Technologies (CISTI)},
  title     = {URecommender: An API for Recommendation Systems},
  year      = {2020},
  month     = {June},
  pages     = {1-6},
  abstract  = {Recommendation systems are intended to assist users in dealing with information overload by providing a content filtering mechanism. Content filtering is based on the user's preferences and interests. Current recommendation systems suffer from the problem of a lack of initial information about new users. This problem, known as the cold-start problem, is present both in existing systems and in new systems, in which any user is a new user. In addition, web application developers find it difficult to integrate recommendation systems into their applications, having to resort to third-party software or develop the recommendation system from scratch. In this work, URecommender is proposed, an API for web recommendation systems composed of a Middleware and a Framework capable of identifying the textual content of greatest interest to the user and recommending relevant related content. Such identification is done implicitly and based on the user's current behavior, which can solve the cold-start problem. In addition, URecommender gives the developer greater control over the recommendation system that will be integrated into the web application under development. The API was used for the development of a real web application and demonstrated good results in the recommendations generated.},
  doi       = {10.23919/CISTI49556.2020.9141055},
  issn      = {2166-0727},
  keywords  = {application program interfaces;information filtering;Internet;middleware;recommender systems;Web recommendation systems;cold-start problem;URecommender;content filtering mechanism;middleware;API;application program interface;Monitoring;Middleware;Information systems;Filtering;Blogs;Large scale integration;Recommendation systems;Web;information filtering;similarity measure;recommendations;cold-start},
}

@InProceedings{Han2009,
  author    = {Han, Seung-Min and Mehedi Hassan, Mohammad and Yoon, Chang-Woo and Lee, Hyun-Woo and Huh, Eui-Nam},
  booktitle = {Grid and Distributed Computing},
  title     = {Efficient Service Recommendation System for Cloud Computing Market},
  year      = {2009},
  address   = {Berlin, Heidelberg},
  editor    = {{\'{S}}l{\k{e}}zak, Dominik and Kim, Tai-hoon and Yau, Stephen S. and Gervasi, Osvaldo and Kang, Byeong-Ho},
  pages     = {117--124},
  publisher = {Springer Berlin Heidelberg},
  abstract  = {In recent years, Cloud computing is gaining much popularity as it can efficiently utilize the computing resources and hence can contribute to the issue of Green IT to save energy. So to make the Cloud services commercialized, Cloud markets are necessary and are being developed. As the increasing numbers of various Cloud services are rapidly evolving in the Cloud market, how to select the best and optimal services will be a great challenge. In this paper we present a Cloud service selection framework in the Cloud market that uses a recommender system (RS) which helps a user to select the best services from different Cloud providers (CP) that matches user requirements. The RS recommends a service based on the network QoS and Virtual Machine (VM) platform factors of difference CPs. The experimental results show that our Cloud service recommender system (CSRS) can effectively recommend a good combination of Cloud services to consumers.},
  isbn      = {978-3-642-10549-4},
}

@InProceedings{Furusawa2011,
  author    = {Furusawa, Yu and Sugiki, Yuta and Hishiyama, Reiko},
  booktitle = {Agents in Principle, Agents in Practice},
  title     = {A Web Service Recommendation System Based on Users' Reputations},
  year      = {2011},
  address   = {Berlin, Heidelberg},
  editor    = {Kinny, David and Hsu, Jane Yung-jen and Governatori, Guido and Ghose, Aditya K.},
  pages     = {508--519},
  publisher = {Springer Berlin Heidelberg},
  abstract  = {In recent years, as the Internet spreads, the use of the Web Service has increased, and it has diversified. The Web Service is registered with UDDI, and the user selects service there and can use it for the provider by making a demand. In future, if the Web Service comes to be used more widely, the number of Web Services will increase, and the number of registrations at the UDDI will also increase. The user examines the large number of available services, and needs to choose the service that best matches their purpose. Quality of Service (QoS) is used as an index when a user chooses a service. Many studies show that the scoring of QoS for service selection is important. Quality of Service is registered by the provider and is treated as an objective factor. However, subjective evaluation, the evaluation of the user after the service use, is also needed to choose the best service. In this study, we use a new element, evaluation, in addition to QoS for service selection. We have expanded the existing filtering technique to make a new way of recommending services. Our method incorporates subjective evaluation. With this model, we apply the technique of information filtering to the Web Service recommendation and make an agent. Also, we simulate it after having clarified the behavior and tested it. The results of testing show that the model provides high levels of precision.},
  isbn      = {978-3-642-25044-6},
}

@InProceedings{Ohtake2017,
  author    = {T. {Ohtake} and Y. {Seki} and T. {Kodaka}},
  booktitle = {2017 24th Asia-Pacific Software Engineering Conference (APSEC)},
  title     = {Steiner Tree Based Recommendation System for Combination of APIs and IoT Devices},
  year      = {2017},
  month     = {Dec},
  pages     = {552-557},
  abstract  = {The growing ecosystem of Web APIs and IoT devices enables us to create a mashup within a short period of time. However, it is difficult to find appropriate Web APIs and IoT devices. Moreover, investigating a combination of Web APIs and IoT devices is much more difficult. The growing ecosystem enables us to achieve ideas in alternative ways, although it is difficult to find such alternative ways. We propose a recommendation system that takes the quality characteristics and such alternative ways into account. The system is implemented using a Steiner tree approximation algorithm, which can recommend a combination of Web APIs and IoT devices suitable for mashups. We tested the system in two aspects, i.e., the validity and performance of the algorithm. The validity was proved by running the system against a graph of actual Web APIs and IoT devices. The performance was proved by running the system against large graphs generated using a pseudorandom number generator. The system can output a result within 8 s against 28,200 nodes and five terminals, which is a considerably shorter time than that required by skilled developers to come up with a combination.},
  doi       = {10.1109/APSEC.2017.64},
  keywords  = {application program interfaces;approximation theory;Internet;Internet of Things;random number generation;recommender systems;trees (mathematics);Steiner Tree based recommendation system;IoT devices;Web API;quality characteristics;Steiner tree approximation algorithm;graph;pseudorandom number generator;Accelerometers;Image edge detection;Steiner trees;Mashups;Infrared sensors;Ecosystems;Mashups;Recommender systems;Application programming interfaces;Internet of Things;Quality management},
}

@InProceedings{Jain2019,
  author    = {H. {Jain} and M. {Kakkar}},
  booktitle = {2019 9th International Conference on Cloud Computing, Data Science Engineering (Confluence)},
  title     = {Job Recommendation System based on Machine Learning and Data Mining Techniques using RESTful API and Android IDE},
  year      = {2019},
  month     = {Jan},
  pages     = {416-421},
  abstract  = {In the current Capitalist world with an abundance of different state-of-the-art industries and fields cropping up, ushering in an influx of jobs for motivated and talented professionals, it is not difficult to identify your field and to persevere to get a job in the respective field but lack of information and awareness render the task difficult. This problem is being tackled by Job Recommendation systems. But not every aspect from the wide spectrum of factors is incorporated in the existing systems. For the "Job Recommendation System - Vitae" machine learning and data mining techniques were applied to a RESTful Web Server application that bridges the gap between the Frontend (Android Application) and the Backend (MongoDB instance) using APIs. The data communicated through APIs is fed into the database and the Recommendation System uses that data to synthesize the results. To make the existing systems even more reliable, here efforts have been done to come up with the idea of a system that uses a wide variety of factors and is not only a one-way recommendation system.},
  doi       = {10.1109/CONFLUENCE.2019.8776964},
  keywords  = {Android (operating system);application program interfaces;business data processing;data mining;employment;Internet;learning (artificial intelligence);NoSQL databases;programming environments;recommender systems;data mining techniques;RESTful Web Server application;job recommendation system;machine learning;RESTful APIs;Android IDE;MongoDB instance;Industries;Filtering;Databases;Web servers;Companies;Collaboration;Machine learning;Data mining;Machine Learning;Recommendation Systems;Content Based filtering;RESTful API;Android Application;Job Recommendations},
}

@InProceedings{Meissa2020,
  author    = {M. {Meissa} and S. {Benharzallah} and L. {Kahloul} and O. {Kazar}},
  booktitle = {2020 21st International Arab Conference on Information Technology (ACIT)},
  title     = {Social-aware Web API Recommendation in IoT},
  year      = {2020},
  month     = {Nov},
  pages     = {1-5},
  abstract  = {The core idea of IoT is the connectivity of real-world devices to the Internet, which allows them to expose their functionalities in APIs ways, communicate to other entities, and flow their data over internet. With the massive growth of connected IoT devices, the number of APIs have also increased. Thus, led up to overload information problem, which is making APIs selection more and more difficult for devices owners and users. Therefore, this paper propose web APIs recommendation framework in IoT environment based on social relationships. The main purpose is providing a novel Recommendation method, which enable to discover APIs and provide relevant suggestion for users. The proposed hybrid algorithm is combined content-based filtering and collaborative filtering techniques to improve the accuracy of rating prediction. Finally, experiments are conducted to evaluate the performance of recommendation.},
  doi       = {10.1109/ACIT50332.2020.9300092},
  keywords  = {Prediction algorithms;Social networking (online);Internet of Things;Sparse matrices;Engines;Recommender systems;Motion pictures;Recommender system;API;IoT;Collaborative filtering;Rating prediction;Social networks},
}

@InProceedings{Baldominos2015,
  author    = {A. {Baldominos} and Y. {Saez} and E. {Albacete} and I. {Marrero}},
  booktitle = {2015 11th International Conference on Innovations in Information Technology (IIT)},
  title     = {An efficient and scalable recommender system for the smart web},
  year      = {2015},
  month     = {Nov},
  pages     = {296-301},
  abstract  = {This work describes the development of a web recommender system implementing both collaborative filtering and content-based filtering. Moreover, it supports two different working modes, either sponsored or related, depending on whether websites are to be recommended based on a list of ongoing ad campaigns or in the user preferences. Novel recommendation algorithms are proposed and implemented, which fully rely on set operations such as union and intersection in order to compute the set of recommendations to be provided to end users. The recommender system is deployed over a real-time big data architecture designed to work with Apache Hadoop ecosystem, thus supporting horizontal scalability, and is able to provide recommendations as a service by means of a RESTful API. The performance of the recommender is measured, resulting in the system being able to provide dozens of recommendations in few milliseconds in a single-node cluster setup.},
  doi       = {10.1109/INNOVATIONS.2015.7381557},
  keywords  = {application program interfaces;Big Data;collaborative filtering;Internet;recommender systems;scalable Web recommender system;smart Web;collaborative filtering;content-based filtering;real-time big data architecture;Apache Hadoop ecosystem;RESTful API;Recommender systems;Uniform resource locators;Collaboration;Computer architecture;Big data;Algorithm design and analysis;Real-time systems},
}

@InProceedings{Garcia2018,
  author    = {Garc\'{\i}a, Iv\'{a}n and Bellog\'{\i}n, Alejandro},
  booktitle = {Proceedings of the 12th ACM Conference on Recommender Systems},
  title     = {Towards an Open, Collaborative REST API for Recommender Systems},
  year      = {2018},
  address   = {New York, NY, USA},
  pages     = {504‚Äì505},
  publisher = {Association for Computing Machinery},
  series    = {RecSys '18},
  abstract  = {Recommender Systems aim to suggest relevant items to users, however, for this they need to properly obtain/serve different types of data from/to the users of such systems. In this work, we propose and show an example implementation for a common REST API focused on Recommender Systems. This API meets the most typical requirements faced by Recommender Systems practitioners while, at the same time, is open and flexible to be extended, based on the feedback from the community. We also present a Web client that demonstrates the functionalities of the proposed API.},
  doi       = {10.1145/3240323.3241615},
  isbn      = {9781450359016},
  location  = {Vancouver, British Columbia, Canada},
  numpages  = {2},
  url       = {https://doi.org/10.1145/3240323.3241615},
}

@InProceedings{BenShimon2014,
  author    = {Ben-Shimon, David and Alexander Tsikinovsky, Alexander and Friedmann, Michael and H\"{o}rle, Johannes},
  booktitle = {Proceedings of the 8th ACM Conference on Recommender Systems},
  title     = {Configuring and Monitoring Recommender System as a Service},
  year      = {2014},
  address   = {New York, NY, USA},
  pages     = {363‚Äì364},
  publisher = {Association for Computing Machinery},
  series    = {RecSys '14},
  abstract  = {Many small and medium e-commerce retailers and publishers use recommender systems (RS) to personalize the website content. Many of them do not have an on premise solution for doing that, but rather contact a company that delivers the RS as a service to their website. The service is then responsible for collecting and storing the data, building recommendation models, and answering recommendation requests. Once the integration to such a service is done, the e-commerce retailer still wish to have some control on the service. Control that allows him to configure the recommendation models, turn off/on the service, apply filters on recommendations, define fallback models and more. In this demo we provide an overview of a real backend system which enables to a typical website owner exactly these capabilities. Capabilities for controlling the RS service in terms of configuration, management and monitoring.},
  doi       = {10.1145/2645710.2645713},
  isbn      = {9781450326681},
  keywords  = {configuration, recommender system as a service, management, graphic user interface},
  location  = {Foster City, Silicon Valley, California, USA},
  numpages  = {2},
  url       = {https://doi.org/10.1145/2645710.2645713},
}

@Comment{jabref-meta: databaseType:bibtex;}
