% Encoding: UTF-8

@Misc{Jenson2020,
  author   = {Jenson, Graham},
  month    = apr,
  note     = {original-date: 2015-06-12T07:31:32Z},
  title    = {grahamjenson/list\_of\_recommender\_systems},
  year     = {2020},
  abstract = {A List of Recommender Systems and Resources. Contribute to grahamjenson/list\_of\_recommender\_systems development by creating an account on GitHub.},
  url      = {https://github.com/grahamjenson/list_of_recommender_systems},
  urldate  = {2021-05-01},
}

@InProceedings{Baldominos2015,
  author    = {Baldominos, Alejandro and Saez, Yago and Albacete, Esperanza and Marrero, Ignacio},
  booktitle = {2015 11th {International} {Conference} on {Innovations} in {Information} {Technology} ({IIT})},
  title     = {An efficient and scalable recommender system for the smart web},
  year      = {2015},
  address   = {Dubai, United Arab Emirates},
  month     = nov,
  pages     = {296--301},
  publisher = {IEEE},
  doi       = {10.1109/INNOVATIONS.2015.7381557},
  isbn      = {9781467385091 9781467385114},
  url       = {http://ieeexplore.ieee.org/document/7381557/},
  urldate   = {2021-05-01},
}

@InProceedings{BenShimon2014,
  author    = {Ben-Shimon, David and Alexander Tsikinovsky, Alexander and Friedmann, Michael and Hörle, Johannes},
  booktitle = {Proceedings of the 8th {ACM} {Conference} on {Recommender} systems - {RecSys} '14},
  title     = {Configuring and monitoring recommender system as a service},
  year      = {2014},
  address   = {Foster City, Silicon Valley, California, USA},
  pages     = {363--364},
  publisher = {ACM Press},
  doi       = {10.1145/2645710.2645713},
  isbn      = {9781450326681},
  language  = {en},
  url       = {http://dl.acm.org/citation.cfm?doid=2645710.2645713},
  urldate   = {2021-05-01},
}

@Misc{Cano2017,
  author = {Çano, Erion},
  title  = {Cloud-based {Recommendation} {Systems}: {Applications} and {Solution}},
  year   = {2017},
  url    = {https://iris.polito.it/retrieve/handle/11583/2669861/149344/ErionCanoCRSAS.pdf},
}

@Misc{Zhang2021,
  author   = {Zhang, Zhenghao},
  month    = apr,
  note     = {original-date: 2018-08-14T11:01:09Z},
  title    = {zhenghaoz/gorse},
  year     = {2021},
  abstract = {An open source recommender system service written in Go},
  url      = {https://github.com/zhenghaoz/gorse},
  urldate  = {2021-05-01},
}

@Misc{Marko2018,
  author   = {Marko, Andras Marcel},
  month    = aug,
  title    = {Recommendation as a {Service} — {The} {Rise} of {Recommendation} {Engines}},
  year     = {2018},
  abstract = {Although the diverse capabilities and strong benefits of recommendation solutions are already leveraged by several industries, their future…},
  journal  = {Medium},
  language = {en},
  url      = {https://medium.com/yusp/recommendation-as-a-service-the-rise-of-recommendation-engines-294e8f7655f8},
  urldate  = {2021-03-07},
}




@InProceedings{Teruya2020,
  author    = {H. S. {Teruya} and I. {Marçal} and R. C. M. {Correia} and R. E. {Garcia} and D. M. {Eler} and J. O. R. {Nunes}},
  booktitle = {2020 15th Iberian Conference on Information Systems and Technologies (CISTI)},
  title     = {URecommender: An API for Recommendation Systems},
  year      = {2020},
  month     = {June},
  pages     = {1-6},
  abstract  = {Recommendation systems are intended to assist users in dealing with information overload by providing a content filtering mechanism. Content filtering is based on the user's preferences and interests. Current recommendation systems suffer from the problem of a lack of initial information about new users. This problem, known as the cold-start problem, is present both in existing systems and in new systems, in which any user is a new user. In addition, web application developers find it difficult to integrate recommendation systems into their applications, having to resort to third-party software or develop the recommendation system from scratch. In this work, URecommender is proposed, an API for web recommendation systems composed of a Middleware and a Framework capable of identifying the textual content of greatest interest to the user and recommending relevant related content. Such identification is done implicitly and based on the user's current behavior, which can solve the cold-start problem. In addition, URecommender gives the developer greater control over the recommendation system that will be integrated into the web application under development. The API was used for the development of a real web application and demonstrated good results in the recommendations generated.},
  doi       = {10.23919/CISTI49556.2020.9141055},
  issn      = {2166-0727},
  keywords  = {application program interfaces;information filtering;Internet;middleware;recommender systems;Web recommendation systems;cold-start problem;URecommender;content filtering mechanism;middleware;API;application program interface;Monitoring;Middleware;Information systems;Filtering;Blogs;Large scale integration;Recommendation systems;Web;information filtering;similarity measure;recommendations;cold-start},
}


@InProceedings{Jain2019,
  author    = {H. {Jain} and M. {Kakkar}},
  booktitle = {2019 9th International Conference on Cloud Computing, Data Science Engineering (Confluence)},
  title     = {Job Recommendation System based on Machine Learning and Data Mining Techniques using RESTful API and Android IDE},
  year      = {2019},
  month     = {Jan},
  pages     = {416-421},
  abstract  = {In the current Capitalist world with an abundance of different state-of-the-art industries and fields cropping up, ushering in an influx of jobs for motivated and talented professionals, it is not difficult to identify your field and to persevere to get a job in the respective field but lack of information and awareness render the task difficult. This problem is being tackled by Job Recommendation systems. But not every aspect from the wide spectrum of factors is incorporated in the existing systems. For the "Job Recommendation System - Vitae" machine learning and data mining techniques were applied to a RESTful Web Server application that bridges the gap between the Frontend (Android Application) and the Backend (MongoDB instance) using APIs. The data communicated through APIs is fed into the database and the Recommendation System uses that data to synthesize the results. To make the existing systems even more reliable, here efforts have been done to come up with the idea of a system that uses a wide variety of factors and is not only a one-way recommendation system.},
  doi       = {10.1109/CONFLUENCE.2019.8776964},
  keywords  = {Android (operating system);application program interfaces;business data processing;data mining;employment;Internet;learning (artificial intelligence);NoSQL databases;programming environments;recommender systems;data mining techniques;RESTful Web Server application;job recommendation system;machine learning;RESTful APIs;Android IDE;MongoDB instance;Industries;Filtering;Databases;Web servers;Companies;Collaboration;Machine learning;Data mining;Machine Learning;Recommendation Systems;Content Based filtering;RESTful API;Android Application;Job Recommendations},
}


@InProceedings{Garcia2018,
  author    = {Garc\'{\i}a, Iv\'{a}n and Bellog\'{\i}n, Alejandro},
  booktitle = {Proceedings of the 12th ACM Conference on Recommender Systems},
  title     = {Towards an Open, Collaborative REST API for Recommender Systems},
  year      = {2018},
  address   = {New York, NY, USA},
  pages     = {504–505},
  publisher = {Association for Computing Machinery},
  series    = {RecSys '18},
  abstract  = {Recommender Systems aim to suggest relevant items to users, however, for this they need to properly obtain/serve different types of data from/to the users of such systems. In this work, we propose and show an example implementation for a common REST API focused on Recommender Systems. This API meets the most typical requirements faced by Recommender Systems practitioners while, at the same time, is open and flexible to be extended, based on the feedback from the community. We also present a Web client that demonstrates the functionalities of the proposed API.},
  doi       = {10.1145/3240323.3241615},
  isbn      = {9781450359016},
  location  = {Vancouver, British Columbia, Canada},
  numpages  = {2},
  url       = {https://doi.org/10.1145/3240323.3241615},
}

@InProceedings{Leony2012,
  author  = {Leony, Derick and Pardo, Abelardo and G., Hugo and Delgado-Kloos, Carlos},
  title   = {A cloud-based architecture for an affective recommender system of learning resources},
  year    = {2012},
  month   = {11},
  volume  = {945},
  journal = {CEUR Workshop Proceedings},
}

@Article{AlBarznji2017,
  author = {Al-Barznji, Kamal and Atanassov, Atanas},
  title  = {A framework for cloud based hybrid recommender system for big data mining},
  year   = {2017},
  month  = {12},
  pages  = {58-65},
  volume = {2},
}

@InProceedings{Hammond2013,
  author    = {Hammond, Klavdiya and Varde, Aparna S.},
  booktitle = {2013 IEEE 13th International Conference on Data Mining Workshops},
  title     = {Cloud Based Predictive Analytics: Text Classification, Recommender Systems and Decision Support},
  year      = {2013},
  month     = {Dec},
  pages     = {607-612},
  abstract  = {This paper presents a detailed study of technologies based on Hadoop and MapReduce available over the cloud for large-scale data mining and predictive analytics. Although some studies may have shown that cloud technologies relying on the MapReduce framework do not perform as well as parallel database management systems, e.g., with ad hoc queries and interactive applications, MapReduce has still been widely used by many organizations for big data storage and analytics. A number of MapReduce based tools are broadly available over the cloud. In this work we explore the Apache Hive data warehousing solution and particularly its Mahout data mining libraries for predictive analytics. We present results in the context of text classification, recommender systems and decision support. We develop prototype tools in these areas and discuss our outcomes from the study useful to researchers and other professionals in cloud computing and application domains. To the best of our knowledge, ours is among the first few in-depth studies on Mahout with application prototypes available for use.},
  doi       = {10.1109/ICDMW.2013.95},
  issn      = {2375-9259},
}

@Article{Wang2020,
  author   = {Wang, Xiaodong and Gu, Bruce and Ren, Yongli and Ye, Wenjie and Yu, Shui and Xiang, Yong and Gao, Longxiang},
  journal  = {IEEE Internet of Things Journal},
  title    = {A Fog-Based Recommender System},
  year     = {2020},
  issn     = {2327-4662},
  month    = {Feb},
  number   = {2},
  pages    = {1048-1060},
  volume   = {7},
  abstract = {Fog computing is an emergent computing paradigm that extends the cloud paradigm. With the explosive growth of smart devices and mobile users, cloud computing no longer matches the requirements of the Internet of Things (IoT) era. Fog computing is a promising solution to satisfying these new requirements, such as low latency, uninterrupted service, and location awareness. As a typical new computing paradigm and network architecture, fog computing raises new challenges, such as privacy, data management, data analytics, information overload, and participatory sensing. In this article, we present a fog-based hybrid recommender system to address the issue of information overload in fog computing. Our proposed system not only abstracts useful information from the fog environment but can also be considered as an optimization tool due to its ability to provide suggestions to improve system performance. In particular, we demonstrate that the proposed system provides personalized and localized recommendations to users, and also advise the system itself to precache the content to optimize the storage capacity of the fog server.},
  doi      = {10.1109/JIOT.2019.2949029},
}

@Article{Mo2014,
  author   = {Mo, Yijun and Chen, Jianwen and Xie, Xia and Luo, Changqing and Yang, Laurence Tianruo},
  journal  = {IEEE Systems Journal},
  title    = {Cloud-Based Mobile Multimedia Recommendation System With User Behavior Information},
  year     = {2014},
  issn     = {1937-9234},
  month    = {March},
  number   = {1},
  pages    = {184-193},
  volume   = {8},
  abstract = {Facing massive multimedia services and contents in the Internet, mobile users usually waste a lot of time to obtain their interests. Therefore, various context-aware recommendation systems have been proposed. Most of those proposed systems deploy a large number of context collectors at terminals and access networks. However, the context collecting and exchanging result in heavy network overhead, and the context processing consumes huge computation. In this paper, a cloud-based mobile multimedia recommendation system which can reduce network overhead and speed up the recommendation process is proposed. The users are classified into several groups according to their context types and values. With the accurate classification rules, the context details are not necessary to compute, and the huge network overhead is reduced. Moreover, user contexts, user relationships, and user profiles are collected from video-sharing websites to generate multimedia recommendation rules based on the Hadoop platform. When a new user request arrives, the rules will be extended and optimized to make real-time recommendation. The results show that the proposed approach can recommend desired services with high precision, high recall, and low response delay.},
  doi      = {10.1109/JSYST.2013.2279732},
}

@Article{Khalid2014,
  author   = {Khalid, Osman and Khan, Muhammad Usman Shahid and Khan, Samee U. and Zomaya, Albert Y.},
  journal  = {IEEE Transactions on Services Computing},
  title    = {OmniSuggest: A Ubiquitous Cloud-Based Context-Aware Recommendation System for Mobile Social Networks},
  year     = {2014},
  issn     = {1939-1374},
  month    = {July},
  number   = {3},
  pages    = {401-414},
  volume   = {7},
  abstract = {The evolution of mobile social networks and the availability of online check-in services, such as Foursquare and Gowalla, have initiated a new wave of research in the area of venue recommendation systems. Such systems recommend places to users closely related to their preferences. Although venue recommendation systems have been studied in recent literature, the existing approaches, mostly based on collaborative filtering, suffer from various issues, such as: 1) data sparseness, 2) cold start, and 3) scalability. Moreover, many existing schemes are limited in functionality, as the generated recommendations do not consider group of “friends” type situations. Furthermore, the traditional systems do not take into account the effect of real-time physical factors (e.g., distance from venue, traffic, and weather conditions) on recommendations. To address the aforementioned issues, this paper proposes a novel cloud-based recommendation framework OmniSuggest that utilizes: 1) Ant colony algorithms, 2) social filtering, and 3) hub and authority scores, to generate optimal venue recommendations. Unlike existing work, our approach suggests venues at a finer granularity for an individual or a “group” of friends with similar interest. Comprehensive experiments are conducted with a large-scale real dataset collected from Foursquare. The results confirm that our method offers more effective recommendations than many state of the art schemes.},
  doi      = {10.1109/TSC.2013.53},
}

@InProceedings{Menon2014,
  author = {K. Menon and V. Paul and M. Sudheep and R. Kumar},
  title  = {An efficient cloud based framework for Web recommendation systems},
  year   = {2014},
}

@Article{Okon2018,
  author = {Okon, Emmanuel and Eke, Bartholomew and Asagba, Prince},
  title  = {An Improved Online Book Recommender System using Collaborative Filtering Algorithm},
  year   = {2018},
  month  = {05},
  doi    = {10.13140/RG.2.2.24240.46086},
}

@Article{VeradelCampo2014,
  author     = {Vera-del-Campo, Juan and Pegueroles, Josep and Hernández-Serrano, Juan and Soriano, Miguel},
  journal    = {Information Sciences},
  title      = {{DocCloud}: {A} document recommender system on cloud computing with plausible deniability},
  year       = {2014},
  issn       = {00200255},
  month      = feb,
  pages      = {387--402},
  volume     = {258},
  doi        = {10.1016/j.ins.2013.04.007},
  language   = {en},
  shorttitle = {{DocCloud}},
  url        = {https://linkinghub.elsevier.com/retrieve/pii/S0020025513002958},
  urldate    = {2021-05-03},
}

@InCollection{Khan2020,
  author    = {Khan, Aftab and Ahmad, Aakash and Rahman, Anis Ur and Alkhalil, Adel},
  booktitle = {Smart {Infrastructure} and {Applications}},
  publisher = {Springer International Publishing},
  title     = {A {Mobile} {Cloud} {Framework} for {Context}-{Aware} and {Portable} {Recommender} {System} for {Smart} {Markets}},
  year      = {2020},
  address   = {Cham},
  editor    = {Mehmood, Rashid and See, Simon and Katib, Iyad and Chlamtac, Imrich},
  isbn      = {9783030137045 9783030137052},
  pages     = {283--309},
  doi       = {10.1007/978-3-030-13705-2_12},
  language  = {en},
  url       = {http://link.springer.com/10.1007/978-3-030-13705-2_12},
  urldate   = {2021-05-03},
}

@Article{Indira2019,
  author   = {Indira, K. and Kavithadevi, M. K.},
  journal  = {Mobile Networks and Applications},
  title    = {Efficient {Machine} {Learning} {Model} for {Movie} {Recommender} {Systems} {Using} {Multi}-{Cloud} {Environment}},
  year     = {2019},
  issn     = {1383-469X, 1572-8153},
  month    = dec,
  number   = {6},
  pages    = {1872--1882},
  volume   = {24},
  doi      = {10.1007/s11036-019-01387-4},
  language = {en},
  url      = {http://link.springer.com/10.1007/s11036-019-01387-4},
  urldate  = {2021-05-03},
}

@InProceedings{Ronen2013,
  author     = {Ronen, Royi and Koenigstein, Noam and Ziklik, Elad and Sitruk, Mikael and Yaari, Ronen and Haiby-Weiss, Neta},
  booktitle  = {Proceedings of the 7th {ACM} conference on {Recommender} systems},
  title      = {Sage: recommender engine as a cloud service},
  year       = {2013},
  address    = {Hong Kong China},
  month      = oct,
  pages      = {475--476},
  publisher  = {ACM},
  doi        = {10.1145/2507157.2508221},
  isbn       = {9781450324090},
  language   = {en},
  shorttitle = {Sage},
  url        = {https://dl.acm.org/doi/10.1145/2507157.2508221},
  urldate    = {2021-05-03},
}

@Article{Chen2011,
  author   = {Chen, Chi-Hua and Yang, Ya-Ching and Shih, Pei-Liang and Lee, Fang-Yi and Lo, Chi-Chun},
  journal  = {Procedia Engineering},
  title    = {A {Cloud}-{Based} {Recommender} {System} - {A} {Case} {Study} of {Delicacy} {Recommendation}},
  year     = {2011},
  issn     = {18777058},
  pages    = {3174--3178},
  volume   = {15},
  doi      = {10.1016/j.proeng.2011.08.596},
  language = {en},
  url      = {https://linkinghub.elsevier.com/retrieve/pii/S1877705811020972},
  urldate  = {2021-05-03},
}

@TechReport{Desai2018,
  author     = {Desai, Priya and Telis, Natalie and Lehmann, Ben and Bettinger, Keith and Pritchard, Jonathan K. and Datta, Somalee},
  title      = {{SciReader}: {A} {Cloud}-based {Recommender} {System} for {Biomedical} {Literature}},
  year       = {2018},
  month      = may,
  type       = {preprint},
  abstract   = {Abstract
          
            With the growing number of biomedical papers published each year, keeping up with relevant literature has become increasingly important, and yet more challenging. SciReader (
            www.scireader.com
            ) is a cloud-based personalized recommender system that specifically aims to assist biomedical researchers and clinicians identify publications of interest to them. SciReader uses topic modeling and other machine learning algorithms to provide users with recommendations that are recent, relevant, and of high quality
            1
            .},
  doi        = {10.1101/333922},
  language   = {en},
  school     = {Scientific Communication and Education},
  shorttitle = {{SciReader}},
  url        = {http://biorxiv.org/lookup/doi/10.1101/333922},
  urldate    = {2021-05-03},
}

@Article{Felfernig2019,
  author   = {Felfernig, Alexander and Polat-Erdeniz, Seda and Uran, Christoph and Reiterer, Stefan and Atas, Muesluem and Tran, Thi Ngoc Trang and Azzoni, Paolo and Kiraly, Csaba and Dolui, Koustabh},
  journal  = {Journal of Intelligent Information Systems},
  title    = {An overview of recommender systems in the internet of things},
  year     = {2019},
  issn     = {0925-9902, 1573-7675},
  month    = apr,
  number   = {2},
  pages    = {285--309},
  volume   = {52},
  doi      = {10.1007/s10844-018-0530-7},
  language = {en},
  url      = {http://link.springer.com/10.1007/s10844-018-0530-7},
  urldate  = {2021-05-03},
}

@Article{Hu2015,
  author     = {Hu, Long and Lin, Kai and Hassan, Mohammad Mehedi and Alamri, Atif and Alelaiwi, Abdulhameed},
  journal    = {Mobile Networks and Applications},
  title      = {{CFSF}: {On} {Cloud}-{Based} {Recommendation} for {Large}-{Scale} {E}-commerce},
  year       = {2015},
  issn       = {1383-469X, 1572-8153},
  month      = jun,
  number     = {3},
  pages      = {380--390},
  volume     = {20},
  doi        = {10.1007/s11036-014-0560-5},
  language   = {en},
  shorttitle = {{CFSF}},
  url        = {http://link.springer.com/10.1007/s11036-014-0560-5},
  urldate    = {2021-05-03},
}

@Article{Lai2011,
  author     = {Lai, Chin-Feng and Chang, Jui-Hung and Hu, Chia-Cheng and Huang, Yueh-Min and Chao, Han-Chieh},
  journal    = {Future Generation Computer Systems},
  title      = {{CPRS}: {A} cloud-based program recommendation system for digital {TV} platforms},
  year       = {2011},
  issn       = {0167739X},
  month      = jun,
  number     = {6},
  pages      = {823--835},
  volume     = {27},
  doi        = {10.1016/j.future.2010.10.002},
  language   = {en},
  shorttitle = {{CPRS}},
  url        = {https://linkinghub.elsevier.com/retrieve/pii/S0167739X10001950},
  urldate    = {2021-05-03},
}

@Article{Abbas2015,
  author     = {Abbas, Assad and Bilal, Kashif and Zhang, Limin and Khan, Samee U.},
  journal    = {Future Generation Computer Systems},
  title      = {A cloud based health insurance plan recommendation system: {A} user centered approach},
  year       = {2015},
  issn       = {0167739X},
  month      = feb,
  pages      = {99--109},
  volume     = {43-44},
  doi        = {10.1016/j.future.2014.08.010},
  language   = {en},
  shorttitle = {A cloud based health insurance plan recommendation system},
  url        = {https://linkinghub.elsevier.com/retrieve/pii/S0167739X14001587},
  urldate    = {2021-05-03},
}

@Misc{2020,
  author   = {recommendersystems.com},
  title    = {Recommendations-{As}-a-{Service} ({RaaS}) – {RS}\_c},
  year     = {2020},
  language = {en-GB},
  url      = {https://recommender-systems.com/resources/recommendations-as-a-service-raas/},
  urldate  = {2021-03-07},
}

@Comment{jabref-meta: databaseType:bibtex;}
